import random

import shutil
from pathlib import Path

from text.dividers import DIVIDER
from tools.utf_xml import XML_UTF
from tools.crc import crc32_hex_from_str
from files.writer import FileWriter


OUT_SUBFOLDER = 'hacker'

XML_SOLAR_MAT_TEMPLATE = '''<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- XML generated by UTFXML Version 2.2 built 19-Aug-2010 -->
<UTFXML filename="solar_mat_hacker.mat">
   <UTF_ROOT>
      <Material_library name="Material library">
         <hacker_none>
            <Type type="text">none</Type>
         </hacker_none>
      {materials}
      </Material_library>
   </UTF_ROOT>
</UTFXML>
'''

MATERIAL_NAME_TEMPLATE = 'hacker_color_{letter}{index:02d}'

MATERIAL_TEMPLATE = '''
 <{material_name}>
    <Dc type="RGB">0, 0, 0</Dc>
    <Type type="text">DcDtEc</Type>
    <Ec type="RGB">{R}, {G}, {B}</Ec>
 </{material_name}>
'''

XML_MAIN_TEMPLATE = '''<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- XML generated by UTFXML Version 2.2 built 19-Aug-2010 -->
<UTFXML filename="{out_file}.cmp">
   <UTF_ROOT>

      <VMeshLibrary>
         {vmesh_libs}
      </VMeshLibrary>
      <hacker_root.3db>
         <MultiLevel>
            <Level0>
               <VMeshPart>
                  <VMeshRef type="VMeshRef">
                     <!-- header size  --> 60,
                     <!-- vmesh lib    --> valid_hack_root.lod0-112.vms,
                     <!-- start vert   --> 0,
                     <!-- num verts    --> 20,
                     <!-- start index  --> 0,
                     <!-- num indices  --> 36,
                     <!-- start mesh   --> 0,
                     <!-- num meshes   --> 1,
                     <!-- bounding box -->  0.21052647,  0,            0.21052599,
                                           -0.21052647, -6.2523189,   -0.21052647,
                     <!-- center       -->  0,          -3.1261594, -238.41858e-9,
                     <!-- radius       --> 3.140305
                  </VMeshRef>
               </VMeshPart>
            </Level0>
            <Switch2 type="float array" count="2">
               0,
               10000000
            </Switch2>
         </MultiLevel>
         <Hardpoints>
            <Fixed>
               <HpRoot>
                  <Position type="Vector">0, 0, 0</Position>
                  <Orientation type="Matrix">
                       1.0000000000,   0.0000000000,   0.0000000000,
                       0.0000000000,   1.0000000000,   0.0000000000,
                       0.0000000000,   0.0000000000,   1.0000000000
                  </Orientation>
               </HpRoot>
               <HpLoot>
                  <Position type="Vector">0, 10, 0</Position>
                  <Orientation type="Matrix">
                       1.0000000000,   0.0000000000,   0.0000000000,
                       0.0000000000,   1.0000000000,   0.0000000000,
                       0.0000000000,   0.0000000000,   1.0000000000
                  </Orientation>
               </HpLoot>
               {extra_hardpoints}
            </Fixed>
         </Hardpoints>
      </hacker_root.3db>
      {vmesh_objects}
      {cmpnd}

   </UTF_ROOT>
</UTFXML>
'''

HARDPOINT_TEMPLATE = '''
   <{hardpoint_name}>
      <Position type="Vector">0, 0, 0</Position>
      <Orientation type="Matrix">
           1.0000000000,   0.0000000000,   0.0000000000,
           0.0000000000,   1.0000000000,   0.0000000000,
           0.0000000000,   0.0000000000,   1.0000000000
      </Orientation>
   </{hardpoint_name}>
'''


VMESH_LIB_HACKER_ROOT = '''
<valid_hack_root.lod0-112.vms>
   <VMeshData type="VMeshData" format="1" surface="4">
      <mesh count="1">
         <!-- Mesh Triangle  First   Last Count   Pad  Material -->
         <!--   0      0 -->     0,    19,   36, 0xcc, 0x0AB66895
      </mesh>
      <index count="36">
         <!-- Triangle  Vtx1, Vtx2, Vtx3 -->
         <!--     0 -->    0,    1,    2
         <!--     1 -->    1,    3,    2
         <!--     2 -->    4,    5,    6
         <!--     3 -->    5,    7,    6
         <!--     4 -->    8,    9,   10
         <!--     5 -->    9,   11,   10
         <!--     6 -->   12,   13,   14
         <!--     7 -->   13,   15,   14
         <!--     8 -->   12,   16,    6
         <!--     9 -->   16,   17,    6
         <!--    10 -->   18,   13,   19
         <!--    11 -->   13,    7,   19
      </index>
      <vertex FVF="0x112" count="20">
         <!-- Vertex           X                  Y                  Z               X Normal        Y Normal        Z Normal          U                 V      -->
         <!--     0 -->     -0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     0.0000000000
         <!--     1 -->     -0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     1.0000000000
         <!--     2 -->      0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     0.0000000000
         <!--     3 -->      0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     1.0000000000
         <!--     4 -->      0.2105264700,     -5.8312659000,      0.2105259900;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--     5 -->      0.2105264700,     -6.2523189000,      0.2105259900;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--     6 -->      0.2105264700,     -5.8312659000,     -0.2105264700;   0.7071067700,   0.7071067700,   0.0000000000;     1.0000000000,     0.0000000000
         <!--     7 -->      0.2105264700,     -6.2523189000,     -0.2105264700;   0.7071067700,  -0.7071067700,   0.0000000000;     1.0000000000,     1.0000000000
         <!--     8 -->      0.2105264700,     -5.8312659000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     0.0000000000
         <!--     9 -->      0.2105264700,     -6.2523189000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     1.0000000000
         <!--    10 -->     -0.2105264700,     -5.8312659000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     0.0000000000
         <!--    11 -->     -0.2105264700,     -6.2523189000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     1.0000000000
         <!--    12 -->     -0.2105264700,     -5.8312659000,     -0.2105264700;  -0.7071067700,   0.7071067700,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    13 -->     -0.2105264700,     -6.2523189000,     -0.2105264700;  -0.7071067700,  -0.7071067700,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    14 -->     -0.2105264700,     -5.8312659000,      0.2105259900;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
         <!--    15 -->     -0.2105264700,     -6.2523189000,      0.2105259900;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    16 -->     -0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   1.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    17 -->      0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   1.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    18 -->     -0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,  -1.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    19 -->      0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,  -1.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
      </vertex>
   </VMeshData>
</valid_hack_root.lod0-112.vms>
'''

COLOR_BOX_VMESH_NAME_TEMPLATE = 'hacker_{panel_index:02d}_color_box_{button_index:02d}.lod0-112.vms'

VMESH_LIB_COLOR_BOX_TEMPLATE = '''
<{button_color_vmesh_library}>
   <VMeshData type="VMeshData" format="1" surface="4">
      <mesh count="1">
         <!-- Mesh Triangle  First   Last Count   Pad  Material -->
         <!--   0      0 -->     0,    19,   36, 0xcc, {material_crc}
      </mesh>
      <index count="36">
         <!-- Triangle  Vtx1, Vtx2, Vtx3 -->
         <!--     0 -->    0,    1,    2
         <!--     1 -->    1,    3,    2
         <!--     2 -->    4,    5,    6
         <!--     3 -->    5,    7,    6
         <!--     4 -->    8,    9,   10
         <!--     5 -->    9,   11,   10
         <!--     6 -->   12,   13,   14
         <!--     7 -->   13,   15,   14
         <!--     8 -->   12,   16,    6
         <!--     9 -->   16,   17,    6
         <!--    10 -->   18,   13,   19
         <!--    11 -->   13,    7,   19
      </index>
      <vertex FVF="0x112" count="20">
         <!-- Vertex           X                  Y                  Z               X Normal        Y Normal        Z Normal          U                 V      -->
         <!--     0 -->     -{scale}049383200,      {scale}005211900,      {scale}051477700;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     0.0000000000
         <!--     1 -->     -{scale}049383200,     -{scale}027710900,      {scale}051477700;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     1.0000000000
         <!--     2 -->      {scale}049383200,      {scale}005211900,      {scale}051477700;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     0.0000000000
         <!--     3 -->      {scale}049383200,     -{scale}027710900,      {scale}051477700;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     1.0000000000
         <!--     4 -->      {scale}049383200,      {scale}005211900,      {scale}051477700;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--     5 -->      {scale}049383200,     -{scale}027710900,      {scale}051477700;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--     6 -->      {scale}049383200,      {scale}005211900,     -{scale}047288100;   0.7071067700,   0.7071067700,   0.0000000000;     1.0000000000,     0.0000000000
         <!--     7 -->      {scale}049383200,     -{scale}027710900,     -{scale}047288100;   0.7071067700,  -0.7071067700,   0.0000000000;     1.0000000000,     1.0000000000
         <!--     8 -->      {scale}049383200,      {scale}005211900,     -{scale}047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     0.0000000000
         <!--     9 -->      {scale}049383200,     -{scale}027710900,     -{scale}047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     1.0000000000
         <!--    10 -->     -{scale}049383200,      {scale}005211900,     -{scale}047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     0.0000000000
         <!--    11 -->     -{scale}049383200,     -{scale}027710900,     -{scale}047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     1.0000000000
         <!--    12 -->     -{scale}049383200,      {scale}005211900,     -{scale}047288100;  -0.7071067700,   0.7071067700,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    13 -->     -{scale}049383200,     -{scale}027710900,     -{scale}047288100;  -0.7071067700,  -0.7071067700,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    14 -->     -{scale}049383200,      {scale}005211900,      {scale}051477700;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
         <!--    15 -->     -{scale}049383200,     -{scale}027710900,      {scale}051477700;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    16 -->     -{scale}049383200,      {scale}005211900,      {scale}051477700;   0.0000000000,   1.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    17 -->      {scale}049383200,      {scale}005211900,      {scale}051477700;   0.0000000000,   1.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    18 -->     -{scale}049383200,     -{scale}027710900,      {scale}051477700;   0.0000000000,  -1.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    19 -->      {scale}049383200,     -{scale}027710900,      {scale}051477700;   0.0000000000,  -1.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
      </vertex>
   </VMeshData>
</{button_color_vmesh_library}>
'''

COLOR_VMESH_OBJECT_TEMPLATE = '''
  <{button_file_name}>
     <Hardpoints>
        <Fixed>
           <HpAttachedFX{button_index:02d}>
              <Position type="Vector">0, {button_fx_drift_y}, 0</Position>
              <Orientation type="Matrix">
                   1.0000000000,   0.0000000000,   0.0000000000,
                   0.0000000000,   1.0000000000,   0.0000000000,
                   0.0000000000,   0.0000000000,   1.0000000000
              </Orientation>
           </HpAttachedFX{button_index:02d}>
        </Fixed>
     </Hardpoints>
    <VMeshPart>
     <VMeshRef type="VMeshRef">
        <!-- header size  --> 60,
        <!-- vmesh lib    --> {button_vmesh_library},
        <!-- start vert   --> 0,
        <!-- num verts    --> 20,
        <!-- start index  --> 0,
        <!-- num indices  --> 36,
        <!-- start mesh   --> 0,
        <!-- num meshes   --> 1,
        <!-- bounding box -->  0.80493832,  0.80052119,     0.80514777,
                              -0.80493832, -0.80277109,    -0.80472881,
        <!-- center       -->  0,          -0.0011249483, 209.48052e-6,
        <!-- radius       --> 1.392296
     </VMeshRef>
    </VMeshPart>
  </{button_file_name}>
'''


CMPND_TEMPLATE = '''
  <Cmpnd>
     <Cons>
        <Fix type="Fix" count="{fix_count}">
            {fix_content}
        </Fix>
     </Cons>

     {parts_obj_content}

     <Root>
        <Object_name name="Object name" type="text">Root</Object_name>
        <File_name name="File name" type="text">hacker_root.3db</File_name>
        <Index type="int">0</Index>
     </Root>
  </Cmpnd>
'''


PART_TEMPLATE = '''
<part>
  <!-- parent      --> "Root",
  <!-- child       --> "btn{index:02d}_lod1",
  <!-- position    --> {pos_x}, {pos_y}, {pos_z}
  <!-- orientation -->  1,0,0,  0,1,0,   0,0,1
</part>
'''


PART_OBJ_TEMPLATE = '''
 <Part_btn{index:02d}_lod1>
    <Object_name name="Object name" type="text">btn{index:02d}_lod1</Object_name>
    <File_name name="File name" type="text">{color_file}</File_name>
    <Index type="int">{index}</Index>
 </Part_btn{index:02d}_lod1>
'''


SUR_OBJ_ROOT_TEMPLATE = '''
mtllib hacker_panel_obj.mtl

v -0.210526 -5.831266 0.210526
v -0.210526 -6.252319 0.210526
v 0.210526 -5.831266 0.210526
v 0.210526 -6.252319 0.210526
v 0.210526 -5.831266 -0.210526
v 0.210526 -6.252319 -0.210526
v -0.210526 -5.831266 -0.210526
v -0.210526 -6.252319 -0.210526
v -1.458951 1.450945 1.459330
v -1.458951 -1.455023 1.459330
v 1.458951 1.450945 1.459330
v 1.458951 -1.455023 1.459330
v 1.458951 1.450945 -1.458571
v 1.458951 -1.455023 -1.458571
v -1.458951 1.450945 -1.458571
v -1.458951 -1.455023 -1.458571
# 16 vertices

vt 0.000000 1.000000
vt 0.000000 0.000000
vt 1.000000 1.000000
vt 1.000000 0.000000
# 4 texture coordinates

vn 0.000000 0.000000 1.000000
vn 1.000000 0.000000 0.000000
vn 0.000000 0.000000 -1.000000
vn -1.000000 0.000000 0.000000
vn 0.000000 1.000000 0.000000
vn 0.000000 -1.000000 0.000000
# 6 normals

g any_hack_root
usemtl any_mat
s 1
f 1/1/1 2/2/1 3/3/1
f 2/2/1 4/4/1 3/3/1
s 2
f 3/1/2 4/2/2 5/3/2
f 4/2/2 6/4/2 5/3/2
s 1
f 5/1/3 6/2/3 7/3/3
f 6/2/3 8/4/3 7/3/3
s 2
f 7/1/4 8/2/4 1/3/4
f 8/2/4 2/4/4 1/3/4
s 3
f 7/1/5 1/2/5 5/3/5
f 1/2/5 3/4/5 5/3/5
f 2/1/6 8/2/6 4/3/6
f 8/2/6 6/4/6 4/3/6
# 12 triangles in group

{buttons_sur}
'''

SUR_BUTTON_ITEM_TEMPLATE = '''
g btn{index:02d}_lod1
usemtl any_mat
s 1
f 9/1/1 10/2/1 11/3/1
f 10/2/1 12/4/1 11/3/1
s 2
f 11/1/2 12/2/2 13/3/2
f 12/2/2 14/4/2 13/3/2
s 1
f 13/1/3 14/2/3 15/3/3
f 14/2/3 16/4/3 15/3/3
s 2
f 15/1/4 16/2/4 9/3/4
f 16/2/4 10/4/4 9/3/4
s 3
f 15/1/5 9/2/5 13/3/5
f 9/2/5 11/4/5 13/3/5
f 10/1/6 16/2/6 12/3/6
f 16/2/6 14/4/6 12/3/6
# 12 triangles in group

'''

VALID_PART_HIT_PTS = 1250
VALID_PART_TURN_FUSE_HIT_PTS = VALID_PART_HIT_PTS - 10
INVALID_PART_HIT_PTS = 1250
INVALID_PART_TURN_FUSE_HIT_PTS = INVALID_PART_HIT_PTS - 10
VALID_PART_DEATH_FUSE_NAME_TEMPLATE = 'fuse_hacker_{panel_index:02d}_box_{button_index:02d}_valid_death'
VALID_PART_HIT_FUSE_NAME_TEMPLATE = 'fuse_hacker_{panel_index:02d}_box_{button_index:02d}_hit'
INVALID_PART_HIT_FUSE_TEMPLATE = 'fuse_hacker_{panel_index:02d}_box_{button_index:02d}_hit'

FX_SOUND_VALID = 'gf_hacker_sound_valid'
FX_IMPACT_VALID = 'gf_hacker_impact_valid'
FX_SOUND_NEAR_LEVEL_TEMPLATE = 'gf_hacker_sound_near_level{level}'
FX_IMPACT_NEAR_LEVEL_TEMPLATE = 'gf_hacker_impact_level{level}'
FX_SOUND_HARDPOINT_TEMPLATE = 'HpFX{index:02d}'
FX_IMPACT_HARDPOINT_TEMPLATE = 'HpAttachedFX{index:02d}'

VALID_COLLISION_GROUP_TEMPLATE = '''[CollisionGroup]
obj = btn{layer_button_index:02d}_lod1
separable = true
child_impulse = 1.000000
parent_impulse = 60.000000
debris_type = debris_vanish
explosion_resistance = 0.0001
hit_pts = {valid_part_hit_pts}
root_health_proxy = false
fuse = {fuse_valid_part_hit_name}, 0.000000, {valid_part_turn_fuse_hit_pts}
fuse = {fuse_valid_part_death_name}, 0.000000, 1'''

INVALID_COLLISION_GROUP_TEMPLATE = '''[CollisionGroup]
obj = btn{layer_button_index:02d}_lod1
separable = true
child_impulse = 1.000000
parent_impulse = 60.000000
debris_type = debris_vanish
explosion_resistance = 0.0001
hit_pts = {invalid_part_hit_pts}
root_health_proxy = false{invalid_part_hit_fuse}'''

COLLISION_INVALID_PART_HIT_FUSE_TEMPLATE = '''
fuse = {fuse_invalid_part_hit_name}, 0.000000, {invalid_part_turn_fuse_hit_pts}'''

FUSE_VALID_HIT_TEMPLATE = '''[fuse]
lifetime = 0.100000
name = {fuse_death_name}
death_fuse = true

[damage_root]
at_t = 0.100000
damage_type = relative
hitpoints = {damage}

[destroy_group]
at_t = 0.200000
group_name = btn{layer_button_index:02d}_lod1
fate = disappear

[fuse]
name = {fuse_hit_name}
lifetime = 0.100000
death_fuse = false

[start_effect]
effect = {impact_particles}
hardpoint = {impact_hardpoint}
at_t = 0.9
pos_offset = 0, 0, 0
ori_offset = 0, 0, 0

[start_effect]
effect = {sound_particles}
hardpoint = {sound_hardpoint}
at_t = 0.9
pos_offset = 0, 0, 0
ori_offset = 0, 0, 0'''

FUSE_INVALID_HIT_TEMPLATE = '''[fuse]
name = {fuse_name}
lifetime = 0.100000
death_fuse = false

[start_effect]
effect = {impact_particles}
hardpoint = {impact_hardpoint}
at_t = 0.9
pos_offset = 0, 0, 0
ori_offset = 0, 0, 0

[start_effect]
effect = {sound_particles}
hardpoint = {sound_hardpoint}
at_t = 0.9
pos_offset = 0, 0, 0
ori_offset = 0, 0, 0'''

VALID_SOLAR_TEMPLATE = '''[Solar]
nickname = {valid_file_name}
ids_name = 1
ids_info = 1
type = NON_TARGETABLE
DA_archetype = solar\\misc\\hacker\\{valid_file_name}.cmp
material_library = solar\\Solar_mat_hacker.mat
LODranges = 0, 3000
mass = 10000.000000
;hit_pts = 59 000 000 000
hit_pts = 6000000000
;hit_pts = 10000000
solar_radius = 1
destructible = true
explosion_arch = explosion_instant
fuse = fuse_drop_cargo_hacker, 0.000000, 1'''

INVALID_SOLAR_TEMPLATE = '''[Solar]
nickname = {invalid_file_name}
ids_name = 60235
ids_info = 60236
type = MISSION_SATELLITE
DA_archetype = solar\\misc\\hacker\\{invalid_file_name}.cmp
material_library = solar\\Solar_mat_hacker.mat
LODranges = 0, 3000
mass = 10000.000000
solar_radius = 5
shape_name = NNM_SM_COMMUNICATIONS
hit_pts = 60000000000000
destructible = false'''

OUT_FILE_LAYER_TEMPLATE = 'hacker_{panel_index:02d}_layer_{layer_index:02d}'
OUT_FILE_VALID_TEMPLATE = 'hacker_{panel_index:02d}_valid'

COLOR_1 = 1
COLOR_2 = 2
COLOR_3 = 3
COLOR_4 = 4
COLOR_5 = 5
COLOR_6 = 6
COLOR_7 = 7
COLOR_8 = 8
COLOR_9 = 9
COLOR_10 = 10
COLOR_11 = 11
COLOR_12 = 12
COLOR_13 = 13
COLOR_14 = 14
COLOR_15 = 15
COLOR_16 = 16
COLOR_17 = 17
COLOR_18 = 18
COLOR_19 = 19
COLOR_20 = 20

RGB1 = [
    (92, 0, 0),
    (126, 0, 0),
    (166, 0, 0),
    (210, 0, 0),
    (255, 0, 0),
    (255, 105, 0),
    (255, 161, 0),
    (243, 210, 0),
    (221, 255, 0),
    (180, 255, 0),
    (127, 255, 0),
    (0, 255, 0),
    (0, 152, 7),
    (0, 38, 0),
    (0, 0, 0),
]

COLOR_RGB_PER_LETTER = {
    'A': RGB1,
}

COLORS = [
    COLOR_1, COLOR_2, COLOR_3, COLOR_4, COLOR_5,
    COLOR_6, COLOR_7, COLOR_8, COLOR_9, COLOR_10,
    COLOR_11, COLOR_12, COLOR_13, COLOR_14, COLOR_15,
]
NEAR_COLORS_LEVELS_COUNT = int(len(COLORS) / 2)

COLOR_FILE_NAME_TEMPLATE = 'hacker_button_{panel_index:02d}_{button_index:02d}.3db'

VISIBLE_DRIFT = 5
LAYER_DRIFT = 2
LAYER_CHILD_LIMIT = 29

BUTTON_VISUAL_SCALE = 1.45
BUTTON_SIZE = 3
BUTTON_FX_DRIFT_Y = (BUTTON_SIZE / 2) + 0.2

BUTTONS_PER_LINE = 8

NOT_RANDOMIZED_COLORS = 2

HACKER_PANELS_PER_COLOR_MAP = 5

HIT_POINTS = 6000000000
HIT_POINT_EXTRA_DAMAGE = 500000

SYS_ROOT_TEMPLATE = '''[Object]
nickname = {root_system_obj_name}
pos = {position}
rotate = {rotate}
archetype = hacker_plate
loadout = hacker_panel_danger
reputation = {reputation}
behavior = NOTHING
visit = 128
pilot = pilot_solar_hardest_hacker_danger'''

SYS_LAYER_TEMPLATE = '''[Object]
nickname = {layer_system_obj_name}
pos = {position}
rotate = {rotate}
archetype = {layer_archetype}
reputation = {reputation}
behavior = NOTHING
pilot = pilot_solar_hardest_hacker_danger
visit = 128
parent = {parent_object}'''

SYS_VALID_LAYER_TEMPLATE = '''[Object]
nickname = {layer_system_obj_name}
pos = {position}
rotate = {rotate}
archetype = {layer_archetype}
visit = 128
loadout = {hacker_success_loadout}'''

REL_TOP = 'TOP'
REL_FRONT = 'FRONT'

ROTATE_PER_REL = {
    REL_TOP: (0, 0, 0),
    REL_FRONT: (-90, 0, 0)
}

COMPILED_SUR_PATH = Path().resolve() / 'templates' / 'solar' / 'static' / 'hacker_layer_any.sur'


def adjust_neg_y_pos(position, drift):
    pos_x, pos_y, pos_z = position
    pos_y -= drift
    return (pos_x, pos_y, pos_z)


def adjust_z_pos(position, drift):
    pos_x, pos_y, pos_z = position
    pos_z += drift
    return (pos_x, pos_y, pos_z)


ADJUST_FUNC_PER_REL = {
    REL_TOP: adjust_neg_y_pos,
    REL_FRONT: adjust_z_pos,
}


class ColorMap(object):

    def __init__(self, letter: str, rgbs: list):
        self.letter = letter
        self.rgbs = rgbs

    def get_rgbs(self):
        return self.rgbs

    def get_material_name(self, color):
        return MATERIAL_NAME_TEMPLATE.format(letter=self.letter, index=color).lower()

    def get_material_crc(self, color):
        return crc32_hex_from_str(self.get_material_name(color))

    @staticmethod
    def get_next_color(color):
        next_color = color+1
        if next_color not in COLORS:
            return COLORS[0]
        return next_color

    @staticmethod
    def get_prev_color(color):
        prev_color = color-1
        if prev_color not in COLORS:
            return COLORS[-1]
        return prev_color


class HackerButton(object):

    def __init__(self, hacker_panel, position, button_index):
        self.hacker_panel = hacker_panel
        self.color = None
        self.valid = False
        self.pos_x, self.pos_y = position
        self.button_index = button_index
        self.layer_button_index = None
        self.layer = None

    def set_button_layer_index(self, layer_button_index):
        self.layer_button_index = layer_button_index

    def set_layer(self, layer):
        self.layer = layer

    def set_color(self, color):
        self.color = color

    def get_color(self):
        return self.color

    def set_valid(self, valid):
        self.valid = valid

    def get_index(self):
        return self.button_index

    def get_file(self):
        return COLOR_FILE_NAME_TEMPLATE.format(panel_index=self.layer.hacker_panel.panel_index, button_index=self.button_index)

    def get_vmesh_lib_name(self):
        return COLOR_BOX_VMESH_NAME_TEMPLATE.format(panel_index=self.layer.hacker_panel.panel_index, button_index=self.button_index)

    def get_part_obj(self):
        return PART_OBJ_TEMPLATE.format(index=self.layer_button_index, color_file=self.get_file())

    def get_part_fix(self, appear_valid):
        pos_y = 0
        if (appear_valid and self.valid) or (not appear_valid and not self.valid):
            pos_y = VISIBLE_DRIFT + (self.layer.layer_index * LAYER_DRIFT) - LAYER_DRIFT

        return PART_TEMPLATE.format(
            index=self.layer_button_index,
            pos_x=self.pos_x,
            pos_y=pos_y,
            pos_z=self.pos_y,
        )

    def get_vmesh_lib(self):
        vmesh_lib_name = self.get_vmesh_lib_name()
        crc = self.hacker_panel.color_map.get_material_crc(self.color)
        return VMESH_LIB_COLOR_BOX_TEMPLATE.format(
            button_color_vmesh_library=vmesh_lib_name,
            material_crc=crc,
            scale=BUTTON_VISUAL_SCALE,
        )

    def get_vmesh_object(self):
        vmesh_lib_name = self.get_vmesh_lib_name()
        file_name = self.get_file()
        return COLOR_VMESH_OBJECT_TEMPLATE.format(
            button_file_name=file_name,
            button_index=self.button_index,
            button_fx_drift_y=BUTTON_FX_DRIFT_Y,
            button_vmesh_library=vmesh_lib_name,
        )
            

class HackerLayer(object):

    def __init__(self, hacker_panel, layer_index):
        self.hacker_panel = hacker_panel
        self.layer_index = layer_index
        self.buttons = []

    def add_button(self, button):
        self.buttons.append(button)

    def get_buttons(self):
        return self.buttons

    def get_valid_file_name(self):
        return OUT_FILE_VALID_TEMPLATE.format(panel_index=self.hacker_panel.panel_index)

    def get_invalid_file_name(self):
        return OUT_FILE_LAYER_TEMPLATE.format(panel_index=self.hacker_panel.panel_index, layer_index=self.layer_index)

    def get_valid_collision_groups(self):
        collision_groups = []
        for button in self.buttons:
            fuse_hit_name = VALID_PART_HIT_FUSE_NAME_TEMPLATE.format(
                panel_index=self.hacker_panel.panel_index,
                button_index=button.button_index,
            )
            fuse_death_name = VALID_PART_DEATH_FUSE_NAME_TEMPLATE.format(
                panel_index=self.hacker_panel.panel_index,
                button_index=button.button_index,
            )
            collision_groups.append(
                VALID_COLLISION_GROUP_TEMPLATE.format(
                    layer_button_index=button.layer_button_index,
                    valid_part_hit_pts=VALID_PART_HIT_PTS,
                    fuse_valid_part_hit_name=fuse_hit_name,
                    fuse_valid_part_death_name=fuse_death_name,
                    valid_part_turn_fuse_hit_pts=VALID_PART_TURN_FUSE_HIT_PTS,
                )
            )
        return collision_groups

    def get_valid_fuses(self):
        fuses = []
        damage = self.hacker_panel.get_valid_part_damage()
        for button in self.buttons:
            fuse_hit_name = VALID_PART_HIT_FUSE_NAME_TEMPLATE.format(
                panel_index=self.hacker_panel.panel_index,
                button_index=button.button_index,
            )
            fuse_death_name = VALID_PART_DEATH_FUSE_NAME_TEMPLATE.format(
                panel_index=self.hacker_panel.panel_index,
                button_index=button.button_index,
            )
            fuses.append(
                FUSE_VALID_HIT_TEMPLATE.format(
                    layer_button_index=button.layer_button_index,
                    fuse_hit_name=fuse_hit_name,
                    fuse_death_name=fuse_death_name,
                    damage=damage,
                    sound_particles=FX_SOUND_VALID,
                    impact_particles=FX_IMPACT_VALID,
                    sound_hardpoint=FX_SOUND_HARDPOINT_TEMPLATE.format(index=button.layer_button_index),
                    impact_hardpoint=FX_IMPACT_HARDPOINT_TEMPLATE.format(index=button.button_index),

                )
            )

        return fuses

    def get_invalid_collision_groups(self):
        collision_groups = []
        for button in self.buttons:
            invalid_part_hit_fuse = ''
            level = self.hacker_panel.get_level_for_color(button.get_color())
            if level:
                fuse_hit_name = INVALID_PART_HIT_FUSE_TEMPLATE.format(
                    panel_index=self.hacker_panel.panel_index,
                    button_index=button.button_index,
                )

                invalid_part_hit_fuse = COLLISION_INVALID_PART_HIT_FUSE_TEMPLATE.format(
                    fuse_invalid_part_hit_name=fuse_hit_name,
                    invalid_part_turn_fuse_hit_pts=INVALID_PART_TURN_FUSE_HIT_PTS,
                )

            collision_groups.append(
                INVALID_COLLISION_GROUP_TEMPLATE.format(
                    layer_button_index=button.layer_button_index,
                    invalid_part_hit_pts=INVALID_PART_HIT_PTS,
                    invalid_part_hit_fuse=invalid_part_hit_fuse,
                )
            )
        return collision_groups

    def get_invalid_fuses(self):
        fuses = []
        for button in self.buttons:
            level = self.hacker_panel.get_level_for_color(button.get_color())
            if not level:
                continue

            sound_particles = FX_SOUND_NEAR_LEVEL_TEMPLATE.format(level=level)
            impact_particles = FX_IMPACT_NEAR_LEVEL_TEMPLATE.format(level=level)

            fuse_name = INVALID_PART_HIT_FUSE_TEMPLATE.format(
                panel_index=self.hacker_panel.panel_index,
                button_index=button.button_index,
            )

            fuses.append(
                FUSE_INVALID_HIT_TEMPLATE.format(
                    fuse_name=fuse_name,
                    sound_particles=sound_particles,
                    impact_particles=impact_particles,
                    sound_hardpoint=FX_SOUND_HARDPOINT_TEMPLATE.format(index=button.layer_button_index),
                    impact_hardpoint=FX_IMPACT_HARDPOINT_TEMPLATE.format(index=button.button_index),
                )
            )
        return fuses

    def get_valid_solar(self):
        return VALID_SOLAR_TEMPLATE.format(
            valid_file_name=self.get_valid_file_name(),
        )

    def get_invalid_solar(self):
        return INVALID_SOLAR_TEMPLATE.format(
            invalid_file_name=self.get_invalid_file_name(),
        )

    def get_valid_solararch(self):
        return [self.get_valid_solar()] + self.get_valid_collision_groups()

    def get_invalid_solararch(self):
        return [self.get_invalid_solar()] + self.get_invalid_collision_groups()

    def get_vmesh_libs(self):
        return [button.get_vmesh_lib() for button in self.buttons]

    def get_vmesh_objects(self):
        return [button.get_vmesh_object() for button in self.buttons]


class HackerPanel(object):

    def __init__(self, factory, color_map, panel_index):
        self.factory = factory
        self.color_map = color_map
        self.buttons = []
        self.panel_index = panel_index
        self.valid_color = random.choice(COLORS)
        self.near_colors_levels = {}
        self.define_near_colors()

        self.layers = []
        self.valid_layer = None

        self.positions = self.factory.positions
        self.buttons_per_color = int(len(self.positions) / len(COLORS))

        self.create_buttons()
        self.define_colors()
        self.define_invalid_layers()
        self.define_valid_layer()

    def define_near_colors(self):
        next_color = self.valid_color
        prev_color = self.valid_color
        for level in range(1, NEAR_COLORS_LEVELS_COUNT+1):
            possible_next_color = self.color_map.get_next_color(next_color)
            possible_prev_color = self.color_map.get_prev_color(prev_color)
            if self.near_colors_levels.get(possible_next_color) is None:
                self.near_colors_levels[possible_next_color] = level
                next_color = possible_next_color
            if self.near_colors_levels.get(possible_prev_color) is None:
                self.near_colors_levels[possible_prev_color] = level
                prev_color = possible_prev_color

    def get_level_for_color(self, color):
        return self.near_colors_levels.get(color)

    def create_buttons(self):
        for index, position in enumerate(self.positions, start=1):
            self.buttons.append(
                HackerButton(self, position, index)
            )

    def define_colors(self):
        colors = COLORS.copy()
        random.shuffle(colors)

        for color in colors:
            buttons = self.get_buttons_without_color()
            random.shuffle(buttons)
            random_buttons = buttons[:self.buttons_per_color]

            for button in random_buttons:
                button.set_color(color)
                if color == self.valid_color:
                    button.set_valid(True)

        # fill not used buttons with last color
        remaining_buttons = self.get_buttons_without_color()
        for button in remaining_buttons:
            button.set_color(color)
            if color == self.valid_color:
                button.set_valid(True)

    def define_invalid_layers(self):
        layer_button_index = 0
        layer_index = 1
        current_layer = HackerLayer(self, layer_index)
        self.layers.append(current_layer)

        for button in self.get_invalid_buttons():
            layer_button_index += 1
            if layer_button_index > LAYER_CHILD_LIMIT:
                layer_button_index = 1
                layer_index += 1
                current_layer = HackerLayer(self, layer_index)
                self.layers.append(current_layer)

            button.set_layer(current_layer)
            button.set_button_layer_index(layer_button_index)
            current_layer.add_button(button)

    def define_valid_layer(self):
        self.valid_layer = HackerLayer(self, self.layers[-1].layer_index + 1)
        layer_button_index = 1

        for button in self.get_valid_buttons():
            button.set_layer(self.valid_layer)
            button.set_button_layer_index(layer_button_index)
            self.valid_layer.add_button(button)
            layer_button_index += 1

    def get_valid_part_damage(self):
        return int((HIT_POINTS / len(self.valid_layer.get_buttons())) + HIT_POINT_EXTRA_DAMAGE)

    def get_buttons_by_color(self, color):
        return [button for button in self.buttons if button.get_color() == color]

    def get_buttons_without_color(self):
        return [button for button in self.buttons if button.get_color() is None]

    def get_invalid_buttons(self):
        return [button for button in self.buttons if button.valid == False]

    def get_valid_buttons(self):
        return [button for button in self.buttons if button.valid == True]

    def get_button_indexes(self, color):
        return sorted([button.get_index() for button in self.buttons])

    def get_colors(self):
        return [button.get_color() for button in self.buttons]

    def get_button_fixes(self, buttons_list, appear_valid):
        return DIVIDER.join([button.get_part_fix(appear_valid) for button in buttons_list])

    def get_buttons_objs(self, buttons_list):
        return DIVIDER.join([button.get_part_obj() for button in buttons_list])

    def get_cmpnd(self, valid, buttons_list):
        return CMPND_TEMPLATE.format(
            fix_content=self.get_button_fixes(buttons_list, valid),
            parts_obj_content=self.get_buttons_objs(buttons_list),
            fix_count=len(buttons_list),
        )

    def get_valid_cmpnd(self):
        return self.get_cmpnd(
            valid=True,
            buttons_list=self.valid_layer.get_buttons(),
        )

    def get_layer_cmpnd(self, layer):
        return self.get_cmpnd(
            valid=False,
            buttons_list=layer.get_buttons(),
        )

    def get_valid_buttons_count(self):
        return len(self.valid_layer.get_buttons())

    def get_valid_vmesh_libs(self):
        return self.valid_layer.get_vmesh_libs()

    def get_valid_vmesh_objects(self):
        return self.valid_layer.get_vmesh_objects()

    def get_layer_vmesh_libs(self, layer):
        return layer.get_vmesh_libs()

    def get_layer_vmesh_objects(self, layer):
        return layer.get_vmesh_objects()

    def get_space_content(self, space_name, reputation, position, relation, success_loadout):
        adjust_func = ADJUST_FUNC_PER_REL[relation]
        rotate_str = '{}, {}, {}'.format(*ROTATE_PER_REL[relation])
        space_objects = [
            SYS_ROOT_TEMPLATE.format(
                root_system_obj_name=space_name,
                reputation=reputation,
                position='{}, {}, {}'.format(*position),
                rotate=rotate_str,
            )
        ]

        position = adjust_func(position, VISIBLE_DRIFT)

        for layer in self.layers:
            space_objects.append(
                SYS_LAYER_TEMPLATE.format(
                    layer_system_obj_name=f'{space_name}_layer_{layer.layer_index}',
                    layer_archetype=layer.get_invalid_file_name(),
                    reputation=reputation,
                    position='{}, {}, {}'.format(*position),
                    rotate=rotate_str,
                    parent_object=space_name,
                )
            )
            position = adjust_func(position, LAYER_DRIFT)

        space_objects.append(
            SYS_VALID_LAYER_TEMPLATE.format(
                layer_system_obj_name=f'{space_name}_layer_valid',
                layer_archetype=self.valid_layer.get_valid_file_name(),
                position='{}, {}, {}'.format(*position),
                rotate=rotate_str,
                hacker_success_loadout=success_loadout,
                parent_object=space_name,
            )
        )

        return DIVIDER.join(space_objects)


class XMLFile(object):

    def __init__(self, out_file, content):
        self.out_file = out_file
        self.content = content


class HackerPanelFactory(object):

    def __init__(self, color_maps):
        self.color_maps = color_maps
        self.positions = []
        self.generate_positions()
        self.hacker_panels = []
        self.generate_hacker_panels()
        self.extra_hardpoints = self.generate_extra_hardpoints()
        self.xmls = []
        self.init_xmls()

    def generate_positions(self):
        line_size = BUTTON_SIZE * BUTTONS_PER_LINE
        max_box_size = line_size / 2
        init_point = -abs(max_box_size)
        core_factor = BUTTON_SIZE / 2

        left_x = init_point
        top_z = init_point

        while True:
            self.positions.append((left_x+core_factor, top_z+core_factor))

            top_z += BUTTON_SIZE
            if top_z >= max_box_size:
                top_z = init_point
                left_x += BUTTON_SIZE

            if left_x >= max_box_size:
                break

    def generate_hacker_panels(self):
        for color_map in self.color_maps:
            for i in range(1, HACKER_PANELS_PER_COLOR_MAP + 1):
                self.hacker_panels.append(HackerPanel(self, color_map=color_map, panel_index=i))

    def generate_extra_hardpoints(self):
        return DIVIDER.join(
            [
                HARDPOINT_TEMPLATE.format(
                    hardpoint_name=FX_SOUND_HARDPOINT_TEMPLATE.format(index=i)
                ) for i in range(1, LAYER_CHILD_LIMIT+1)
            ]
        )

    def get_xml(self, out_file, cmpnd, vmesh_libs, vmesh_objects):
        vmesh_libs = [VMESH_LIB_HACKER_ROOT] + vmesh_libs
        content = XML_MAIN_TEMPLATE.format(
            vmesh_libs=DIVIDER.join(vmesh_libs),
            vmesh_objects=DIVIDER.join(vmesh_objects),
            out_file=out_file,
            cmpnd=cmpnd,
            extra_hardpoints=self.extra_hardpoints,
        )
        return XMLFile(out_file, content)

    def init_xmls(self):
        for hacker_panel in self.hacker_panels:
            for layer in hacker_panel.layers:
                out_file = layer.get_invalid_file_name()
                cmpnd = hacker_panel.get_layer_cmpnd(layer)
                vmesh_libs = hacker_panel.get_layer_vmesh_libs(layer)
                vmesh_objects = hacker_panel.get_layer_vmesh_objects(layer)
                self.xmls.append(
                    self.get_xml(out_file, cmpnd, vmesh_libs, vmesh_objects)
                )

            valid_out_file = hacker_panel.valid_layer.get_valid_file_name()
            valid_cmpnd = hacker_panel.get_valid_cmpnd()
            valid_vmesh_libs = hacker_panel.get_valid_vmesh_libs()
            valid_vmesh_objects = hacker_panel.get_valid_vmesh_objects()
            self.xmls.append(
                self.get_xml(valid_out_file, valid_cmpnd, valid_vmesh_libs, valid_vmesh_objects)
            )

    def get_xmls_content(self):
        return [xml.content for xml in self.xmls]

    def get_sur(self):
        return SUR_OBJ_ROOT_TEMPLATE.format(
            buttons_sur=DIVIDER.join(
                [SUR_BUTTON_ITEM_TEMPLATE.format(index=i) for i in range(1, LAYER_CHILD_LIMIT+1)]
            )
        )

    def get_fuses(self):
        fuses = []
        for hacker_panel in self.hacker_panels:
            for layer in hacker_panel.layers:
                fuses += layer.get_invalid_fuses()

            fuses += hacker_panel.valid_layer.get_valid_fuses()
        return DIVIDER.join(fuses)

    def get_solararch(self):
        solararch = []
        for hacker_panel in self.hacker_panels:
            for layer in hacker_panel.layers:
                solararch += layer.get_invalid_solararch()

            solararch += hacker_panel.valid_layer.get_valid_solararch()
        return DIVIDER.join(solararch)

    def get_filenames_list(self):
        names = []
        for hacker_panel in self.hacker_panels:
            for layer in hacker_panel.layers:
                names.append(layer.get_invalid_file_name())

            names.append(hacker_panel.valid_layer.get_valid_file_name())
        return names


class MaterialsFactory(object):

    def __init__(self, color_maps):
        self.color_maps = color_maps
        self.materials = []
        self.generate_materials()

    def generate_materials(self):
        for color_map in self.color_maps:
            for index, rgb_item in enumerate(color_map.get_rgbs(), start=1):
                red, green, blue = rgb_item
                name = color_map.get_material_name(index)
                self.materials.append(
                    MATERIAL_TEMPLATE.format(
                        material_name=name,
                        R=red,
                        G=green,
                        B=blue,
                    )
                )

    def get_xml(self):
        return XML_SOLAR_MAT_TEMPLATE.format(
            materials=DIVIDER.join(self.materials)
        )


class HackerPanelManager(object):

    def __init__(self):
        self.colors_maps = [ColorMap(letter=letter, rgbs=rgbs) for letter, rgbs in COLOR_RGB_PER_LETTER.items()]
        self.panels_factory = HackerPanelFactory(color_maps=self.colors_maps)
        self.materials_factory = MaterialsFactory(color_maps=self.colors_maps)

    def get_random_hacker_panel(self):
        return random.choice(self.panels_factory.hacker_panels)

    def get_surs(self):
        return self.panels_factory.get_sur()

    def copy_paste_surs(self):
        filenames = self.panels_factory.get_filenames_list()
        out_path = XML_UTF.get_out_path()

        for name in filenames:
            shutil.copy(COMPILED_SUR_PATH, out_path / f'{name}.sur')

    def write_content(self):
        xmls = self.panels_factory.get_xmls_content()
        self.copy_paste_surs()

        materials = self.materials_factory.get_xml()
        xmls.append(materials)

        XML_UTF.process_xmls(xmls)

        FileWriter.write_to_subfolder(OUT_SUBFOLDER, 'fuses.ini', self.panels_factory.get_fuses())
        FileWriter.write_to_subfolder(OUT_SUBFOLDER, 'solararch.ini', self.panels_factory.get_solararch())
