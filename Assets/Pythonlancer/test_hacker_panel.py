import random

from text.dividers import DIVIDER
from tools.utf_xml import XML_UTF


XML_SOLAR_MAT_TEMPLATE = '''<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- XML generated by UTFXML Version 2.2 built 19-Aug-2010 -->
<UTFXML filename="solar_mat_hacker.mat">
   <UTF_ROOT>
      <Material_library name="Material library">
         <hacker_none>
            <Type type="text">none</Type>
         </hacker_none>
      {materials}
      </Material_library>
   </UTF_ROOT>
</UTFXML>
'''

MATERIAL_TEMPLATE = '''
 <hacker{index:02d}>
    <Dc type="RGB">0, 0, 0</Dc>
    <Type type="text">DcDtEc</Type>
    <Ec type="RGB">{R}, {G}, {B}</Ec>
 </hacker{index:02d}>
'''

XML_MAIN_TEMPLATE = '''<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- XML generated by UTFXML Version 2.2 built 19-Aug-2010 -->
<UTFXML filename="{out_file}">
   <UTF_ROOT>

      <VMeshLibrary>
         {vmesh_libs}
      </VMeshLibrary>
      <hacker_root.3db>
         <MultiLevel>
            <Level0>
               <VMeshPart>
                  <VMeshRef type="VMeshRef">
                     <!-- header size  --> 60,
                     <!-- vmesh lib    --> valid_hack_root.lod0-112.vms,
                     <!-- start vert   --> 0,
                     <!-- num verts    --> 20,
                     <!-- start index  --> 0,
                     <!-- num indices  --> 36,
                     <!-- start mesh   --> 0,
                     <!-- num meshes   --> 1,
                     <!-- bounding box -->  0.21052647,  0,            0.21052599,
                                           -0.21052647, -6.2523189,   -0.21052647,
                     <!-- center       -->  0,          -3.1261594, -238.41858e-9,
                     <!-- radius       --> 3.140305
                  </VMeshRef>
               </VMeshPart>
            </Level0>
            <Switch2 type="float array" count="2">
               0,
               10000000
            </Switch2>
         </MultiLevel>
         <Hardpoints>
            <Fixed>
               <HpRoot>
                  <Position type="Vector">0, 0, 0</Position>
                  <Orientation type="Matrix">
                       1.0000000000,   0.0000000000,   0.0000000000,
                       0.0000000000,   1.0000000000,   0.0000000000,
                       0.0000000000,   0.0000000000,   1.0000000000
                  </Orientation>
               </HpRoot>
               <HpLoot>
                  <Position type="Vector">0, 8, 0</Position>
                  <Orientation type="Matrix">
                       1.0000000000,   0.0000000000,   0.0000000000,
                       0.0000000000,   1.0000000000,   0.0000000000,
                       0.0000000000,   0.0000000000,   1.0000000000
                  </Orientation>
               </HpLoot>
            </Fixed>
         </Hardpoints>
      </hacker_root.3db>
      {vmesh_objects}
      {cmpnd}

   </UTF_ROOT>
</UTFXML>
'''

VMESH_LIB_HACKER_ROOT = '''
<valid_hack_root.lod0-112.vms>
   <VMeshData type="VMeshData" format="1" surface="4">
      <mesh count="1">
         <!-- Mesh Triangle  First   Last Count   Pad  Material -->
         <!--   0      0 -->     0,    19,   36, 0xcc, 0x0AB66895
      </mesh>
      <index count="36">
         <!-- Triangle  Vtx1, Vtx2, Vtx3 -->
         <!--     0 -->    0,    1,    2
         <!--     1 -->    1,    3,    2
         <!--     2 -->    4,    5,    6
         <!--     3 -->    5,    7,    6
         <!--     4 -->    8,    9,   10
         <!--     5 -->    9,   11,   10
         <!--     6 -->   12,   13,   14
         <!--     7 -->   13,   15,   14
         <!--     8 -->   12,   16,    6
         <!--     9 -->   16,   17,    6
         <!--    10 -->   18,   13,   19
         <!--    11 -->   13,    7,   19
      </index>
      <vertex FVF="0x112" count="20">
         <!-- Vertex           X                  Y                  Z               X Normal        Y Normal        Z Normal          U                 V      -->
         <!--     0 -->     -0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     0.0000000000
         <!--     1 -->     -0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     1.0000000000
         <!--     2 -->      0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     0.0000000000
         <!--     3 -->      0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     1.0000000000
         <!--     4 -->      0.2105264700,     -5.8312659000,      0.2105259900;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--     5 -->      0.2105264700,     -6.2523189000,      0.2105259900;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--     6 -->      0.2105264700,     -5.8312659000,     -0.2105264700;   0.7071067700,   0.7071067700,   0.0000000000;     1.0000000000,     0.0000000000
         <!--     7 -->      0.2105264700,     -6.2523189000,     -0.2105264700;   0.7071067700,  -0.7071067700,   0.0000000000;     1.0000000000,     1.0000000000
         <!--     8 -->      0.2105264700,     -5.8312659000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     0.0000000000
         <!--     9 -->      0.2105264700,     -6.2523189000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     1.0000000000
         <!--    10 -->     -0.2105264700,     -5.8312659000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     0.0000000000
         <!--    11 -->     -0.2105264700,     -6.2523189000,     -0.2105264700;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     1.0000000000
         <!--    12 -->     -0.2105264700,     -5.8312659000,     -0.2105264700;  -0.7071067700,   0.7071067700,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    13 -->     -0.2105264700,     -6.2523189000,     -0.2105264700;  -0.7071067700,  -0.7071067700,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    14 -->     -0.2105264700,     -5.8312659000,      0.2105259900;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
         <!--    15 -->     -0.2105264700,     -6.2523189000,      0.2105259900;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    16 -->     -0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   1.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    17 -->      0.2105264700,     -5.8312659000,      0.2105259900;   0.0000000000,   1.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    18 -->     -0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,  -1.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    19 -->      0.2105264700,     -6.2523189000,      0.2105259900;   0.0000000000,  -1.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
      </vertex>
   </VMeshData>
</valid_hack_root.lod0-112.vms>
'''

COLOR_BOX_VMESH_NAME_TEMPLATE = 'hacker_color_box_{color_int:02d}.lod0-112.vms'

VMESH_LIB_COLOR_BOX_TEMPLATE = '''
<{button_color_vmesh_library}>
   <VMeshData type="VMeshData" format="1" surface="4">
      <mesh count="1">
         <!-- Mesh Triangle  First   Last Count   Pad  Material -->
         <!--   0      0 -->     0,    19,   36, 0xcc, 0x{material_crc}
      </mesh>
      <index count="36">
         <!-- Triangle  Vtx1, Vtx2, Vtx3 -->
         <!--     0 -->    0,    1,    2
         <!--     1 -->    1,    3,    2
         <!--     2 -->    4,    5,    6
         <!--     3 -->    5,    7,    6
         <!--     4 -->    8,    9,   10
         <!--     5 -->    9,   11,   10
         <!--     6 -->   12,   13,   14
         <!--     7 -->   13,   15,   14
         <!--     8 -->   12,   16,    6
         <!--     9 -->   16,   17,    6
         <!--    10 -->   18,   13,   19
         <!--    11 -->   13,    7,   19
      </index>
      <vertex FVF="0x112" count="20">
         <!-- Vertex           X                  Y                  Z               X Normal        Y Normal        Z Normal          U                 V      -->
         <!--     0 -->     -0.8049383200,      0.8005211900,      0.8051477700;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     0.0000000000
         <!--     1 -->     -0.8049383200,     -0.8027710900,      0.8051477700;   0.0000000000,   0.0000000000,   1.0000000000;     0.0000000000,     1.0000000000
         <!--     2 -->      0.8049383200,      0.8005211900,      0.8051477700;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     0.0000000000
         <!--     3 -->      0.8049383200,     -0.8027710900,      0.8051477700;   0.0000000000,   0.0000000000,   1.0000000000;     1.0000000000,     1.0000000000
         <!--     4 -->      0.8049383200,      0.8005211900,      0.8051477700;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--     5 -->      0.8049383200,     -0.8027710900,      0.8051477700;   1.0000000000,   0.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--     6 -->      0.8049383200,      0.8005211900,     -0.8047288100;   0.7071067700,   0.7071067700,   0.0000000000;     1.0000000000,     0.0000000000
         <!--     7 -->      0.8049383200,     -0.8027710900,     -0.8047288100;   0.7071067700,  -0.7071067700,   0.0000000000;     1.0000000000,     1.0000000000
         <!--     8 -->      0.8049383200,      0.8005211900,     -0.8047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     0.0000000000
         <!--     9 -->      0.8049383200,     -0.8027710900,     -0.8047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     0.0000000000,     1.0000000000
         <!--    10 -->     -0.8049383200,      0.8005211900,     -0.8047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     0.0000000000
         <!--    11 -->     -0.8049383200,     -0.8027710900,     -0.8047288100;   0.0000000000,   0.0000000000,  -1.0000000000;     1.0000000000,     1.0000000000
         <!--    12 -->     -0.8049383200,      0.8005211900,     -0.8047288100;  -0.7071067700,   0.7071067700,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    13 -->     -0.8049383200,     -0.8027710900,     -0.8047288100;  -0.7071067700,  -0.7071067700,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    14 -->     -0.8049383200,      0.8005211900,      0.8051477700;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
         <!--    15 -->     -0.8049383200,     -0.8027710900,      0.8051477700;  -1.0000000000,   0.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    16 -->     -0.8049383200,      0.8005211900,      0.8051477700;   0.0000000000,   1.0000000000,   0.0000000000;     0.0000000000,     1.0000000000
         <!--    17 -->      0.8049383200,      0.8005211900,      0.8051477700;   0.0000000000,   1.0000000000,   0.0000000000;     1.0000000000,     1.0000000000
         <!--    18 -->     -0.8049383200,     -0.8027710900,      0.8051477700;   0.0000000000,  -1.0000000000,   0.0000000000;     0.0000000000,     0.0000000000
         <!--    19 -->      0.8049383200,     -0.8027710900,      0.8051477700;   0.0000000000,  -1.0000000000,   0.0000000000;     1.0000000000,     0.0000000000
      </vertex>
   </VMeshData>
</{button_color_vmesh_library}>
'''

COLOR_VMESH_OBJECT_TEMPLATE = '''
  <{button_object_name}>
    <VMeshPart>
     <VMeshRef type="VMeshRef">
        <!-- header size  --> 60,
        <!-- vmesh lib    --> {button_vmesh_library},
        <!-- start vert   --> 0,
        <!-- num verts    --> 20,
        <!-- start index  --> 0,
        <!-- num indices  --> 36,
        <!-- start mesh   --> 0,
        <!-- num meshes   --> 1,
        <!-- bounding box -->  0.80493832,  0.80052119,     0.80514777,
                              -0.80493832, -0.80277109,    -0.80472881,
        <!-- center       -->  0,          -0.0011249483, 209.48052e-6,
        <!-- radius       --> 1.392296
     </VMeshRef>
    </VMeshPart>
  </{button_object_name}>
'''


CMPND_TEMPLATE = '''
  <Cmpnd>
     <Cons>
        <Fix type="Fix" count="{fix_count}">
            {fix_content}
        </Fix>
     </Cons>

     {parts_obj_content}

     <Root>
        <Object_name name="Object name" type="text">Root</Object_name>
        <File_name name="File name" type="text">hacker_root.3db</File_name>
        <Index type="int">0</Index>
     </Root>
  </Cmpnd>
'''


PART_TEMPLATE = '''
<part>
  <!-- parent      --> "Root",
  <!-- child       --> "btn{index:02d}_lod1",
  <!-- position    --> {pos_x}, {pos_y}, {pos_z}
  <!-- orientation -->  1,0,0,  0,1,0,   0,0,1
</part>
'''


PART_OBJ_TEMPLATE = '''
 <Part_btn{index:02d}_lod1>
    <Object_name name="Object name" type="text">btn{index:02d}_lod1</Object_name>
    <File_name name="File name" type="text">{color_file}</File_name>
    <Index type="int">{index}</Index>
 </Part_btn{index:02d}_lod1>
'''


SUR_OBJ_ROOT_TEMPLATE = '''
mtllib hacker_panel_obj.mtl

v -0.210526 -5.831266 0.210526
v -0.210526 -6.252319 0.210526
v 0.210526 -5.831266 0.210526
v 0.210526 -6.252319 0.210526
v 0.210526 -5.831266 -0.210526
v 0.210526 -6.252319 -0.210526
v -0.210526 -5.831266 -0.210526
v -0.210526 -6.252319 -0.210526
v -0.804938 0.800521 0.805148
v -0.804938 -0.802771 0.805148
v 0.804938 0.800521 0.805148
v 0.804938 -0.802771 0.805148
v 0.804938 0.800521 -0.804729
v 0.804938 -0.802771 -0.804729
v -0.804938 0.800521 -0.804729
v -0.804938 -0.802771 -0.804729
# 16 vertices

vt 0.000000 1.000000
vt 0.000000 0.000000
vt 1.000000 1.000000
vt 1.000000 0.000000
# 4 texture coordinates

vn 0.000000 0.000000 1.000000
vn 1.000000 0.000000 0.000000
vn 0.000000 0.000000 -1.000000
vn -1.000000 0.000000 0.000000
vn 0.000000 1.000000 0.000000
vn 0.000000 -1.000000 0.000000
# 6 normals

g any_hack_root
usemtl any_mat
s 1
f 1/1/1 2/2/1 3/3/1
f 2/2/1 4/4/1 3/3/1
s 2
f 3/1/2 4/2/2 5/3/2
f 4/2/2 6/4/2 5/3/2
s 1
f 5/1/3 6/2/3 7/3/3
f 6/2/3 8/4/3 7/3/3
s 2
f 7/1/4 8/2/4 1/3/4
f 8/2/4 2/4/4 1/3/4
s 3
f 7/1/5 1/2/5 5/3/5
f 1/2/5 3/4/5 5/3/5
f 2/1/6 8/2/6 4/3/6
f 8/2/6 6/4/6 4/3/6
# 12 triangles in group

{buttons_sur}
'''

SUR_BUTTON_ITEM_TEMPLATE = '''
g btn{index:02d}_lod1
usemtl any_mat
s 1
f 9/1/1 10/2/1 11/3/1
f 10/2/1 12/4/1 11/3/1
s 2
f 11/1/2 12/2/2 13/3/2
f 12/2/2 14/4/2 13/3/2
s 1
f 13/1/3 14/2/3 15/3/3
f 14/2/3 16/4/3 15/3/3
s 2
f 15/1/4 16/2/4 9/3/4
f 16/2/4 10/4/4 9/3/4
s 3
f 15/1/5 9/2/5 13/3/5
f 9/2/5 11/4/5 13/3/5
f 10/1/6 16/2/6 12/3/6
f 16/2/6 14/4/6 12/3/6
# 12 triangles in group

'''




COLLISION_GROUP_TEMPLATE = '''[CollisionGroup]
obj = btn{index:02d}_lod1
separable = true
child_impulse = 1.000000
parent_impulse = 60.000000
debris_type = debris_vanish
explosion_resistance = 0.0001
hit_pts = 500
root_health_proxy = false'''


ROOT_VALID_TEMPLATE = '''[Solar]
nickname = hacker_{index:02d}_valid_root
ids_name = 1
ids_info = 1
type = NON_TARGETABLE
DA_archetype = solar\\misc\\hacker\\roots\\hacker_{index:02d}_valid_root.cmp
material_library = solar\\Solar_mat_hacker.mat
material_library = fx\\envmapbasic.mat
envmap_material = envmapsolar01
LODranges = 0, 5000
mass = 10000.000000
hit_pts = 50111111111111111111111
solar_radius = 1
destructible = true
explosion_arch = explosion_instant'''


ROOT_DANGER_TEMPLATE = '''[Solar]
nickname = hacker_{index:02d}_danger_root
ids_name = 1
ids_info = 1
type = NON_TARGETABLE
DA_archetype = solar\\misc\\hacker\\roots\\hacker_{index:02d}_danger_root.cmp
material_library = solar\\Solar_mat_hacker.mat
material_library = fx\\envmapbasic.mat
envmap_material = envmapsolar01
LODranges = 0, 5000
mass = 10000.000000
hit_pts = 50111111111111111111111
solar_radius = 1
destructible = true
explosion_arch = explosion_instant'''


OUT_FILE = 'hacker_danger_root_combinations.cmp'

OUT_FILE_LAYER_TEMPLATE = 'hacker_{panel_index:02d}_layer_{layer_index:02d}.cmp'
OUT_FILE_VALID_TEMPLATE = 'hacker_{panel_index:02d}_valid.cmp'

COLOR_1 = 1
COLOR_2 = 2
COLOR_3 = 3
COLOR_4 = 4
COLOR_5 = 5
COLOR_6 = 6
COLOR_7 = 7
COLOR_8 = 8
COLOR_9 = 9
COLOR_10 = 10
COLOR_11 = 11
COLOR_12 = 12
COLOR_13 = 13
COLOR_14 = 14
COLOR_15 = 15
COLOR_16 = 16
COLOR_17 = 17
COLOR_18 = 18
COLOR_19 = 19
COLOR_20 = 20

RGB = [
(0, 0, 255),
(155, 0, 222),
(208, 0, 185),
(240, 0, 147),
(255, 0, 110),
(255, 0, 77),
(255, 0, 45),
(255, 0, 0),
(252, 79, 0),
(242, 118, 0),
(226, 151, 0),
(202, 181, 0),
(170, 208, 0),
(125, 232, 0),
(0, 255, 0),


]




COLORS = [
    COLOR_1, COLOR_2, COLOR_3, COLOR_4, COLOR_5,
    COLOR_6, COLOR_7, COLOR_8, COLOR_9, COLOR_10,
    COLOR_11, COLOR_12, COLOR_13, COLOR_14, COLOR_15,
    # COLOR_16, COLOR_17, COLOR_18, COLOR_19, COLOR_20,
]

CRC_PER_COLOR = {
    COLOR_1: 'EFF37772',
    COLOR_2: 'F4FA26C8',
    COLOR_3: 'FDFD165E',
    COLOR_4: '199983FD',
    COLOR_5: '109EB36B',
    COLOR_6: 'B97E2D1',
    COLOR_7: '290D247',
    COLOR_8: '182FCFD6',
    COLOR_9: '1128FF40',
    COLOR_10: '1B9176A5',
    COLOR_11: '12964633',
    COLOR_12: '99F1789',
    COLOR_13: '98271F',
    COLOR_14: 'E4FCB2BC',
    COLOR_15: 'EDFB822A',
    COLOR_16: 'F6F2D390',
    COLOR_17: 'FFF5E306',
    COLOR_18: 'E54AFE97',
    COLOR_19: 'EC4DCE01',
    COLOR_20: '1C3E2566',
}

DANGER_ROOT_FILE_NAME = 'hacker_danger_root.3db'
COLOR_FILE_NAME_TEMPLATE = 'hacker_button_color_{color_int:02d}.3db'


VISIBLE_DRIFT = 5
LAYER_DRIFT = 2
LAYER_CHILD_LIMIT = 29

BUTTON_SIZE = 2
BUTTONS_PER_LINE = 9

HACKER_PANELS_TOTAL = 1


class HackerButton(object):

    def __init__(self, position, button_index):
        global global_button_index
        self.color = None
        self.valid = False
        self.pos_x, self.pos_y = position
        self.button_index = button_index
        self.layer_button_index = None
        self.layer = None

    def set_button_layer_index(self, layer_button_index):
        self.layer_button_index = layer_button_index

    def set_layer(self, layer):
        self.layer = layer

    def set_color(self, color):
        self.color = color

    def get_color(self):
        return self.color

    def set_valid(self, valid):
        self.valid = valid

    def get_index(self):
        return self.button_index

    def get_file(self):
        return COLOR_FILE_NAME_TEMPLATE.format(color_int=self.color)

    def get_part_obj(self):
        return PART_OBJ_TEMPLATE.format(index=self.layer_button_index, color_file=self.get_file())

    def get_part_fix(self, appear_valid):
        pos_y = 0
        if (appear_valid and self.valid) or (not appear_valid and not self.valid):
            pos_y = VISIBLE_DRIFT + (self.layer.layer_index * LAYER_DRIFT) - LAYER_DRIFT

        return PART_TEMPLATE.format(
            index=self.layer_button_index,
            pos_x=self.pos_x,
            pos_y=pos_y,
            pos_z=self.pos_y,
        )


class HackerLayer(object):

    def __init__(self, hacker_panel, layer_index):
        self.hacker_panel = hacker_panel
        self.layer_index = layer_index
        self.buttons = []

    def add_button(self, button):
        self.buttons.append(button)

    def get_buttons(self):
        return self.buttons


class HackerPanel(object):

    def __init__(self, factory, panel_index):
        self.factory = factory
        self.buttons = []
        self.panel_index = panel_index
        self.valid_color = random.choice(COLORS)

        self.layers = []
        self.valid_layer = None

        self.positions = self.factory.positions
        self.buttons_per_color = int(len(self.positions) / len(COLORS))

        self.create_buttons()
        self.define_colors()
        self.define_invalid_layers()
        self.define_valid_layer()

    def get_positions(self):
        return 

    def create_buttons(self):
        for index, position in enumerate(self.positions, start=1):
            self.buttons.append(
                HackerButton(position, index)
            )

    def define_colors(self):
        colors = COLORS.copy()
        random.shuffle(colors)

        for color in colors:
            buttons = self.get_buttons_without_color()
            random.shuffle(buttons)
            random_buttons = buttons[:self.buttons_per_color]

            for button in random_buttons:
                button.set_color(color)
                if color == self.valid_color:
                    button.set_valid(True)

        # fill not used buttons with last color
        remaining_buttons = self.get_buttons_without_color()
        for button in remaining_buttons:
            button.set_color(color)
            if color == self.valid_color:
                button.set_valid(True)

    def define_invalid_layers(self):
        layer_button_index = 0
        layer_index = 1
        current_layer = HackerLayer(self, layer_index)
        self.layers.append(current_layer)

        for button in self.get_invalid_buttons():
            layer_button_index += 1
            if layer_button_index > LAYER_CHILD_LIMIT:
                layer_button_index = 1
                layer_index += 1
                current_layer = HackerLayer(self, layer_index)
                self.layers.append(current_layer)

            button.set_layer(current_layer)
            button.set_button_layer_index(layer_button_index)
            current_layer.add_button(button)

    def define_valid_layer(self):
        self.valid_layer = HackerLayer(self, self.layers[-1].layer_index + 1)
        layer_button_index = 1

        for button in self.get_valid_buttons():
            button.set_layer(self.valid_layer)
            button.set_button_layer_index(layer_button_index)
            self.valid_layer.add_button(button)
            layer_button_index += 1

    def get_buttons_by_color(self, color):
        return [button for button in self.buttons if button.get_color() == color]

    def get_buttons_without_color(self):
        return [button for button in self.buttons if button.get_color() is None]

    def get_invalid_buttons(self):
        return [button for button in self.buttons if button.valid == False]

    def get_valid_buttons(self):
        return [button for button in self.buttons if button.valid == True]

    def get_button_indexes(self, color):
        return sorted([button.get_index() for button in self.buttons])

    def get_colors(self):
        return [button.get_color() for button in self.buttons]

    def get_button_fixes(self, buttons_list, appear_valid):
        return DIVIDER.join([button.get_part_fix(appear_valid) for button in buttons_list])

    def get_buttons_objs(self, buttons_list):
        return DIVIDER.join([button.get_part_obj() for button in buttons_list])

    def get_valid_root(self):
        return ROOT_VALID_TEMPLATE.format(index=self.panel_index)

    def get_danger_root(self):
        return ROOT_DANGER_TEMPLATE.format(index=self.panel_index)

    def get_valid_solararch(self):
        return [self.get_valid_root()] + self.get_collision_groups()

    def get_danger_solararch(self):
        return [self.get_danger_root()] + self.get_collision_groups()

    def get_cmpnd(self, valid, buttons_list):
        return CMPND_TEMPLATE.format(
            fix_content=self.get_button_fixes(buttons_list, valid),
            parts_obj_content=self.get_buttons_objs(buttons_list),
            fix_count=len(buttons_list),
        )

    def get_valid_cmpnd(self):
        return self.get_cmpnd(
            valid=True,
            buttons_list=self.valid_layer.get_buttons(),
        )

    def get_layer_cmpnd(self, layer):
        return self.get_cmpnd(
            valid=False,
            buttons_list=layer.get_buttons(),
        )


class XMLFile(object):

    def __init__(self, out_file, content):
        self.out_file = out_file
        self.content = content


class HackerPanelFactory(object):

    def __init__(self):
        self.positions = []
        self.generate_positions()
        self.hacker_panels = self.generate_hacker_panels()
        self.vmesh_libs_string = None
        self.vmesh_objects_string = None
        self.define_vmesh_libs()
        self.xmls = []
        self.init_xmls()

    def generate_positions(self):
        line_size = BUTTON_SIZE * BUTTONS_PER_LINE
        max_box_size = line_size / 2
        init_point = -abs(max_box_size)
        core_factor = BUTTON_SIZE / 2

        left_x = init_point
        top_z = init_point

        while True:
            self.positions.append((left_x+core_factor, top_z+core_factor))

            top_z += BUTTON_SIZE
            if top_z >= max_box_size:
                top_z = init_point
                left_x += BUTTON_SIZE

            if left_x >= max_box_size:
                break

    def generate_hacker_panels(self):
        return [HackerPanel(self, panel_index=i) for i in range(1, HACKER_PANELS_TOTAL+1)]

    def define_vmesh_libs(self):
        vmesh_libs = [VMESH_LIB_HACKER_ROOT]
        vmesh_objects = []

        for color in COLORS:
            vmesh_lib_name = COLOR_BOX_VMESH_NAME_TEMPLATE.format(color_int=color)
            button_object_name = COLOR_FILE_NAME_TEMPLATE.format(color_int=color)
            crc = CRC_PER_COLOR.get(color)
            vmesh_libs.append(
                VMESH_LIB_COLOR_BOX_TEMPLATE.format(
                    button_color_vmesh_library=vmesh_lib_name,
                    material_crc=crc,
                )
            )
            vmesh_objects.append(
                COLOR_VMESH_OBJECT_TEMPLATE.format(
                    button_object_name=button_object_name,
                    button_vmesh_library=vmesh_lib_name,
                )
            )

        self.vmesh_libs_string = DIVIDER.join(vmesh_libs)
        self.vmesh_objects_string = DIVIDER.join(vmesh_objects)

    def get_solararch(self):
        solararch_content = []
        for panel in self.hacker_panels:
            solararch_content += panel.get_valid_solararch()
            solararch_content += panel.get_danger_solararch()

        return DIVIDER.join(solararch_content)

    def get_xml(self, out_file, cmpnd):
        content = XML_MAIN_TEMPLATE.format(
            vmesh_libs=self.vmesh_libs_string,
            vmesh_objects=self.vmesh_objects_string,
            out_file=out_file,
            cmpnd=cmpnd,
        )
        return XMLFile(out_file, content)

    def init_xmls(self):
        for hacker_panel in self.hacker_panels:
            for layer in hacker_panel.layers:
                out_file = OUT_FILE_LAYER_TEMPLATE.format(panel_index=hacker_panel.panel_index, layer_index=layer.layer_index)
                cmpnd = hacker_panel.get_layer_cmpnd(layer)
                self.xmls.append(
                    self.get_xml(out_file, cmpnd)
                )

            valid_out_file = OUT_FILE_VALID_TEMPLATE.format(panel_index=hacker_panel.panel_index)
            valid_cmpnd = hacker_panel.get_valid_cmpnd()
            self.xmls.append(
                self.get_xml(valid_out_file, valid_cmpnd)
            )

    def get_xmls_content(self):
        return [xml.content for xml in self.xmls]

    def get_sur(self):
        return SUR_OBJ_ROOT_TEMPLATE.format(
            buttons_sur=DIVIDER.join(
                [SUR_BUTTON_ITEM_TEMPLATE.format(index=i) for i in range(1, LAYER_CHILD_LIMIT+1)]
            )
        )

    def get_collision_groups(self):
        return DIVIDER.join(
            [COLLISION_GROUP_TEMPLATE.format(index=i) for i in range(1, LAYER_CHILD_LIMIT+1)]
        )


class MaterialsFactory(object):

    def __init__(self):
        self.materials = []
        self.generate_materials()

    def generate_materials(self):
        for index, rgb_item in enumerate(RGB, start=1):
            red, green, blue = rgb_item
            self.materials.append(
                MATERIAL_TEMPLATE.format(
                    index=index,
                    R=red,
                    G=green,
                    B=blue,
                )
            )

    def get_xml(self):
        return XML_SOLAR_MAT_TEMPLATE.format(
            materials=DIVIDER.join(self.materials)
        )


factory = HackerPanelFactory()
xmls = factory.get_xmls_content()
sur = factory.get_sur()
get_collision_groups = factory.get_collision_groups()
# print(get_collision_groups)
# solararch = factory.get_solararch()

# xmls = []

materials = MaterialsFactory().get_xml()
# xmls.append(materials)
XML_UTF.process_xmls([materials])

# import pdb;pdb.set_trace()
# XML_UTF.process_xmls(xmls)



# print(DIVIDER.join(xmls))
# print('')
# print(solararch)

# import pdb;pdb.set_trace()