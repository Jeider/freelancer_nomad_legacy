import random

from text.dividers import DIVIDER


XML_MAIN_TEMPLATE = '''<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- XML generated by UTFXML Version 2.2 built 19-Aug-2010 -->
<UTFXML filename="{out_file}">
   <UTF_ROOT>
    <Valid>
      {valid_cmpnds}
    </Valid>
    <Danger>
      {danger_vmpnds}
    </Danger>
   </UTF_ROOT>
</UTFXML>
'''

CMPND_TEMPLATE = '''
<Cmpnd{cmpnd_index:02d}>
  <Cmpnd>
     <Cons>
        <Fix type="Fix" count="{fix_count}">
            {fix_content}
        </Fix>
     </Cons>

     {parts_obj_content}

     <Root>
        <Object_name name="Object name" type="text">Root</Object_name>
        <File_name name="File name" type="text">{root_file_name}</File_name>
        <Index type="int">0</Index>
     </Root>
  </Cmpnd>
</Cmpnd{cmpnd_index:02d}>
'''


PART_TEMPLATE = '''
<part>
  <!-- parent      --> "Root",
  <!-- child       --> "btn{index:02d}_lod1",
  <!-- position    --> {pos_x}, {pos_y}, {pos_z}
  <!-- orientation -->  1,0,0,  0,1,0,   0,0,1
</part>
'''


PART_OBJ_TEMPLATE = '''
 <Part_btn{index:02d}_lod1>
    <Object_name name="Object name" type="text">btn{index:02d}_lod1</Object_name>
    <File_name name="File name" type="text">{color_file}</File_name>
    <Index type="int">{index}</Index>
 </Part_btn{index:02d}_lod1>
'''


COLLISION_GROUP_TEMPLATE = '''[CollisionGroup]
obj = btn{index:02d}_lod1
separable = true
child_impulse = 1.000000
parent_impulse = 60.000000
debris_type = debris_vanish
explosion_resistance = 0.0001
hit_pts = 20
root_health_proxy = false'''


ROOT_VALID_TEMPLATE = '''[Solar]
nickname = hacker_{index:02d}_valid_root
ids_name = 1
ids_info = 1
type = NON_TARGETABLE
DA_archetype = solar\\misc\\hacker\\roots\\hacker_{index:02d}_valid_root.cmp
material_library = solar\\Solar_mat_hacker.mat
material_library = fx\\envmapbasic.mat
envmap_material = envmapsolar01
LODranges = 0, 5000
mass = 10000.000000
hit_pts = 50111111111111111111111
solar_radius = 1
destructible = true
explosion_arch = explosion_instant'''


ROOT_DANGER_TEMPLATE = '''[Solar]
nickname = hacker_{index:02d}_danger_root
ids_name = 1
ids_info = 1
type = NON_TARGETABLE
DA_archetype = solar\\misc\\hacker\\roots\\hacker_{index:02d}_danger_root.cmp
material_library = solar\\Solar_mat_hacker.mat
material_library = fx\\envmapbasic.mat
envmap_material = envmapsolar01
LODranges = 0, 5000
mass = 10000.000000
hit_pts = 50111111111111111111111
solar_radius = 1
destructible = true
explosion_arch = explosion_instant'''


OUT_FILE = 'hacker_danger_root_combinations.cmp'

'''
green
blue
red
white
purple
yellow
black
'''


COLOR_1 = 1
COLOR_2 = 2
COLOR_3 = 3

BUTTONS_PER_COLOR = 6
COLORS = [
    COLOR_1, COLOR_2, COLOR_3
]

VALID_ROOT_FILE_NAME = 'hacker_valid_root.3db'
DANGER_ROOT_FILE_NAME = 'hacker_danger_root.3db'
COLOR_1_FILE_NAME = 'hacker_button_color01.3db'
COLOR_2_FILE_NAME = 'hacker_button_color02.3db'
COLOR_3_FILE_NAME = 'hacker_button_color03.3db'

FILE_PER_COLOR = {
    COLOR_1: COLOR_1_FILE_NAME,
    COLOR_2: COLOR_2_FILE_NAME,
    COLOR_3: COLOR_3_FILE_NAME,
}

DANGER_HEIGHT_VISIBLE = 7.8
DANGER_HEIGHT_HIDDEN = 2

VALID_DRIFT = 5

VALID_HEIGHT_VISIBLE = DANGER_HEIGHT_VISIBLE + VALID_DRIFT
VALID_HEIGHT_HIDDEN = DANGER_HEIGHT_HIDDEN + VALID_DRIFT


POS1 = 9.7
POS2 = -9.7
POS3 = 3.25
POS4 = -3.25
HACKER_PANELS_TOTAL = 8

POSITIONS = [
    (POS2, POS2),
    (POS4, POS2),
    (POS2, POS4),
    (POS4, POS4),
    
    (POS2, POS1),
    (POS4, POS1),
    (POS2, POS3),
    (POS4, POS3),
    
    (POS1, POS2),
    (POS3, POS2),
    (POS1, POS4),
    (POS3, POS4),
    
    (POS1, POS1),
    (POS3, POS1),
    (POS1, POS3),
    (POS3, POS3),
]


class HackerButton(object):

    def __init__(self, position, button_index):
        global global_button_index
        self.color = None
        self.valid = False
        self.pos_x, self.pos_y = position
        self.button_index = button_index

    def set_color(self, color):
        self.color = color

    def get_color(self):
        return self.color

    def set_valid(self, valid):
        self.valid = valid

    def get_index(self):
        return self.button_index

    def get_file(self):
        return FILE_PER_COLOR[self.color]

    def get_part_obj(self):
        return PART_OBJ_TEMPLATE.format(index=self.button_index, color_file=self.get_file())

    def get_part_fix(self, valid):
        pos_y = VALID_HEIGHT_VISIBLE if self.valid else DANGER_HEIGHT_VISIBLE

        return PART_TEMPLATE.format(
            index=self.button_index,
            pos_x=self.pos_x,
            pos_y=pos_y,
            pos_z=self.pos_y,
        )

    def get_collision_group(self):
        return COLLISION_GROUP_TEMPLATE.format(index=self.button_index)


class HackerPanel(object):

    def __init__(self, panel_index):
        self.buttons = []
        self.panel_index = panel_index
        self.valid_color = random.choice(COLORS)

        self.create_buttons()
        self.define_colors()

    def create_buttons(self):
        for index, position in enumerate(POSITIONS, start=1):
            self.buttons.append(
                HackerButton(position, index)
            )

    def define_colors(self):
        random.shuffle(COLORS)

        for color in COLORS:
            buttons = self.get_buttons_without_color()
            random.shuffle(buttons)
            random_buttons = buttons[:BUTTONS_PER_COLOR]

            for button in random_buttons:
                button.set_color(color)
                if color == self.valid_color:
                    button.set_valid(True)

        # fill not used buttons with last color
        remaining_buttons = self.get_buttons_without_color()
        for button in remaining_buttons:
            button.set_color(color)
            if color == self.valid_color:
                button.set_valid(True)

    def get_buttons_by_color(self, color):
        return [button for button in self.buttons if button.get_color() == color]

    def get_buttons_without_color(self):
        return [button for button in self.buttons if button.get_color() is None]

    def get_button_indexes(self, color):
        return sorted([button.get_index() for button in self.buttons])

    def get_colors(self):
        return [button.get_color() for button in self.buttons]

    def get_button_fixes(self, valid):
        return DIVIDER.join([button.get_part_fix(valid) for button in self.buttons if button.valid == valid])

    def get_buttons_objs(self, valid):
        return DIVIDER.join([button.get_part_obj() for button in self.buttons if button.valid == valid])

    def get_collision_groups(self):
        return [button.get_collision_group() for button in self.buttons]

    def get_valid_root(self):
        return ROOT_VALID_TEMPLATE.format(index=self.panel_index)

    def get_danger_root(self):
        return ROOT_DANGER_TEMPLATE.format(index=self.panel_index)

    def get_valid_solararch(self):
        return [self.get_valid_root()] + self.get_collision_groups()

    def get_danger_solararch(self):
        return [self.get_danger_root()] + self.get_collision_groups()

    def get_cmpnd(self, valid, root_file_name):
        return CMPND_TEMPLATE.format(
            cmpnd_index=self.panel_index,
            fix_content=self.get_button_fixes(valid),
            parts_obj_content=self.get_buttons_objs(valid),
            fix_count=len(POSITIONS),
            root_file_name=root_file_name,
        )

    def get_valid_cmpnd(self):
        return self.get_cmpnd(
            valid=True,
            root_file_name=VALID_ROOT_FILE_NAME,
        )

    def get_danger_cmpnd(self):
        return self.get_cmpnd(
            valid=False,
            root_file_name=DANGER_ROOT_FILE_NAME,
        )


class HackerPanelFactory(object):

    def __init__(self):
        self.hacker_panels = self.generate_hacker_panels()

    def generate_hacker_panels(self):
        return [HackerPanel(i) for i in range(HACKER_PANELS_TOTAL+1)]

    def get_valid_cmpnds(self):
        return DIVIDER.join([panel.get_valid_cmpnd() for panel in self.hacker_panels])

    def get_danger_cmpnds(self):
        return DIVIDER.join([panel.get_danger_cmpnd() for panel in self.hacker_panels])

    def get_solararch(self):
        solararch_content = []
        for panel in self.hacker_panels:
            solararch_content += panel.get_valid_solararch()
            solararch_content += panel.get_danger_solararch()

        return DIVIDER.join(solararch_content)

    def get_xml(self):
        return XML_MAIN_TEMPLATE.format(
            valid_cmpnds=self.get_valid_cmpnds(),
            danger_vmpnds=self.get_danger_cmpnds(),
            out_file=OUT_FILE,
        )


factory = HackerPanelFactory()
xml = factory.get_xml()
solararch = factory.get_solararch()


# print(xml)
print('')
# print(solararch)